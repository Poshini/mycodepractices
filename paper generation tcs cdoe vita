Date Time
Problem Description
Arun and his sister Usha are challenging each other with some mathematical puzzles. Usha, the cleverer one, has come up with the idea of givingArun 12 distinct digits from 0 to 9, and have him form the largest date time in 2018 with them. Arun is a little nervous, and asks you to help him with a computer program.

Usha will give Arun 12 distinct digits. He needs to create a date time combination in the year 2018: the date in the MM/DD form (all four digits must be present), and the time in the format HH:MM (all four digits must be present). The date may be from 01/01 to 12/31 and the time may be from 00:00 to 23:59 (in the 24 hour format). The digits provided may be used only once in the answer that Arun gives.

If more than one date time combination may be formed, Arun needs to give the latest valid date time possible in the year 2018.

Constraints
Single digits (any of 0-9)

Input Format
A line consisting of a sequence of 12 (not necessarily distinct) single digits (any of 0-9) separated by commas. The sequence will be non-decreasing.

Output
The maximum possible valid date time in the year 2018. The output must be in the format

MM/DD HH:MM

If no date time can be constructed, the output should be 0

Test Case

Explanation
Example1 :

Input

0,0,1,2,2,2,3,5,9,9,9,9

Output

12/30 22:59

Explanation

The 12 digits to be used by Arun are given.

The maximum valid date time using only the digits given, and with each digit used at most once is

12/30 22:59

This is the output.

Example 2

Input

3,3,3,3,3,3,3,3,3,3,3,3

Output

0

Explanation


As no digit less than 3 is present in the input, a valid month cannot be formed. Hence no valid Date time can be formed with the input digits.


import itertools
from math import factorial

# import math


teasy = int(input())
neasy = int(input())
startord = int(65)
liste = [chr(x) for x in range(startord, (startord + teasy))]
easyset = itertools.combinations(liste, neasy)
startord += teasy

tmedium = int(input())
nmedium = int(input())
listm = [chr(x) for x in range(startord, (startord + tmedium))]
medset = itertools.combinations(listm, nmedium)
startord += tmedium

tdifficlt = int(input())
ndifficlt = int(input())
listd = [chr(x) for x in range(startord, (startord + tdifficlt))]
diffset = itertools.combinations(listd, ndifficlt)
startord += tdifficlt

x = factorial(teasy) / (factorial(neasy) * factorial(teasy - neasy)) * factorial(tdifficlt) / (
            factorial(ndifficlt) * factorial(tdifficlt - ndifficlt)) * factorial(tmedium) / (
                factorial(nmedium) * factorial(tmedium - nmedium))
char1, char2 = map(str, input().split())
char3=str(input())
char3done=False
print(int(x))

newcomblist = []
easyset = list(easyset)
medset = list(medset)
diffset = list(diffset)
#print(easyset,medset,diffset,sep='======')
for a in range(len(easyset)):
    for b in range(len(medset)):
        for c in range(len(diffset)):
            newitem = easyset[a] + medset[b] + diffset[c]
            if char3  in newitem and char3done==True:
                continue

            if char1 in newitem:
                if char2 in newitem:
                    continue
            if char3  in newitem and char3done == False:
                char3done = True
            newcomblist.append(newitem)


#print(newcomblist)
print(int(len(newcomblist)))


